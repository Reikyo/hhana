#!/usr/bin/env python

from rootpy.extern.argparse import ArgumentParser
from mva.categories import CATEGORIES

parser = ArgumentParser()
parser.add_argument('categories', choices=CATEGORIES.keys())
parser.add_argument('--embedding', action='store_true', default=False)
args = parser.parse_args()

from rootpy.plotting import Hist2D

from mva.samples import Data, MC_Ztautau, Embedded_Ztautau, Others, QCD
from mva.stats import histfactory
from mva.massregions import MassRegions
from mva.norm import cache
from mva.plotting import draw_samples
from mva.systematics import SYSTEMATICS

import ROOT
from ROOT import RooMinimizer


before_name = "bkg_before_fit"
after_name = "bkg_after_fit"

data = Data(2012)
if args.embedding:
    ztt = Embedded_Ztautau(2012, systematics=True)
    before_name += '_embedded'
    after_name += '_embedded'
else:
    ztt = MC_Ztautau(2012, systematics=True)
others = Others(2012, systematics=True)
qcd = QCD(data, (ztt, others))

expr = 'tau1_numTrack_recounted:tau2_numTrack_recounted'
min_edge, max_edge = .5, 5.5
bins = int(max_edge - min_edge)

hist_template = Hist2D(bins, min_edge, max_edge,
                       bins, min_edge, max_edge)
region = 'OS'
year = 2012
param = 'TRACK'
mass_regions = MassRegions(110, 180, True)

for category in CATEGORIES[args.categories]:

    
    # initialize Z scale to (data - QCD - others) / Z
    
    ztt.scale = 1.
    ztt.scale_error = 0.
    data_events = data.events(category, region, cuts=mass_regions.control_region, p1p3=False)
    qcd_events = qcd.events(category, region, cuts=mass_regions.control_region, p1p3=False)
    oth_events = others.events(category, region, cuts=mass_regions.control_region, p1p3=False)
    z_events = ztt.events(category, region, cuts=mass_regions.control_region, p1p3=False)
    print data_events, qcd_events, oth_events, z_events
    scale_init = (data_events - qcd_events - oth_events) / float(z_events)
    ztt.scale = scale_init
    
    qcd.scale = 1.
    qcd.scale_error = 0.

    # draw before fit
    draw_samples(hist_template, expr,
            model=[qcd, others, ztt],
            data=data,
            category=category,
            region=region,
            cuts=mass_regions.control_region,
            name="Recounted Number of Tracks",
            output_name=before_name,
            show_ratio=True,
            systematics=SYSTEMATICS.values(),
            p1p3=False,
            ravel=True)
    
    ztt_sample = ztt.get_histfactory_sample(
            hist_template, expr, category, region,
            cuts=mass_regions.control_region,
            p1p3=False, systematics=False)
    others_sample = others.get_histfactory_sample(
            hist_template, expr, category, region,
            cuts=mass_regions.control_region,
            p1p3=False, systematics=False)
    qcd_sample = qcd.get_histfactory_sample(
            hist_template, expr, category, region,
            cuts=mass_regions.control_region,
            p1p3=False, systematics=False)
    data_sample = data.get_histfactory_sample(
            hist_template, expr, category, region,
            cuts=mass_regions.control_region,
            p1p3=False)

    ztt_sample.AddNormFactor('z_scale', 1., 0.5, 2.0)
    qcd_sample.AddNormFactor('qcd_scale', 1., 0.5, 2.0)

    channel = histfactory.make_channel(category.name,
            [ztt_sample, others_sample, qcd_sample], data_sample.GetHisto())
    measurement = histfactory.make_measurement('trackfit', '', [channel],
            lumi_rel_error=0.028,
            POI=['z_scale', 'qcd_scale'])

    workspace = histfactory.make_model(measurement)

    obs_data = workspace.data('obsData')
    pdf = workspace.pdf('model_channel_%s' % category.name)

    nll = pdf.createNLL(obs_data)
    minim = RooMinimizer(nll)
    strategy = ROOT.Math.MinimizerOptions.DefaultStrategy()
    minim.setStrategy(strategy)
    tol = ROOT.Math.MinimizerOptions.DefaultTolerance()
    minim.setEps(max(tol, 1.))
    minim.setPrintLevel(0)
    minim.optimizeConst(2)
    minimizer = ROOT.Math.MinimizerOptions.DefaultMinimizerType()
    algorithm = ROOT.Math.MinimizerOptions.DefaultMinimizerAlgo()
    status = -1

    tries = 1
    maxtries = 4

    while tries <= maxtries:
        status = minim.minimize(minimizer, algorithm)
        if status % 1000 == 0:
            # ignore erros from Improve
            break
        elif tries == 1:
                #Logger << kINFO << "    ----> Doing a re-scan first" << GEndl;
                minim.minimize(minimizer, "Scan")
        elif tries == 2:
            if ROOT.Math.MinimizerOptions.DefaultStrategy() == 0:
                #Logger << kINFO << "    ----> trying with strategy = 1" << GEndl;
                minim.setStrategy(1)
            else:
                tries += 1 # skip this trial if stratehy is already 1
        elif tries == 3:
            #Logger << kINFO << "    ----> trying with improve" << GEndl;
            minimizer = "Minuit";
            algorithm = "migradimproved";

    fit_result = minim.save()

    z_scale_arg = fit_result.floatParsFinal().find("z_scale")
    z_scale = z_scale_arg.getValV() * scale_init
    z_scale_error = z_scale_arg.getError() * scale_init

    qcd_scale_arg = fit_result.floatParsFinal().find("qcd_scale")
    qcd_scale = qcd_scale_arg.getValV()
    qcd_scale_error = qcd_scale_arg.getError()

    ztt.scale = z_scale
    ztt.scale_error = z_scale_error
    qcd.scale = qcd_scale
    qcd.scale_error = qcd_scale_error
    
    cache.set_scales(
            year,
            category.name, args.embedding, param,
            qcd_scale, qcd_scale_error,
            z_scale, z_scale_error)

    # draw after fit
    draw_samples(hist_template, expr,
            model=[qcd, others, ztt],
            data=data,
            category=category,
            region=region,
            cuts=mass_regions.control_region,
            name="Recounted Number of Tracks",
            output_name=after_name,
            show_ratio=True,
            systematics=SYSTEMATICS.values(),
            p1p3=False,
            ravel=True)
