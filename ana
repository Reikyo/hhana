#!/usr/bin/env python

"""
This is the main driver script for the analysis
"""

from mva.cmd import get_parser

args = get_parser().parse_args()
year = args.year

# stdlib imports
import os, sys
import shutil
import math

# rootpy imports
from rootpy.tree import Cut
from rootpy.io import root_open
from rootpy.stats import histfactory
from rootpy.plotting import Hist2D, Hist
from rootpy.utils.silence import silence_sout_serr
from rootpy.plotting.contrib import plot_contour_matrix
from rootpy.plotting import root2matplotlib as rplt

# root imports
import ROOT

# numpy imports
import numpy as np

# matplotlib imports
from matplotlib import cm
from matplotlib import pyplot as plt

# local imports
from mva.stats import hypotests
from mva.plotting import (
    draw_scatter, draw_samples_array, draw_2d_hist,
    draw_channel_array, draw_channel,
    correlations, hist_scores)
from mva.samples import Higgs, Data
from mva.utils import make_multipage_pdf, braindump
from mva.systematics import (get_systematics, iter_systematics,
    parse_systematics, systematic_name)
from mva.categories import CATEGORIES
from mva.massregions import MassRegions
from mva.variables import VARIABLES, WEIGHTS
from mva.analysis import get_analysis, Analysis
from mva.lumi import get_lumi_uncert
from mva import log, variables, samples, MMC_MASS, CONST_PARAMS
from mva.norm import cache


SYSTEMATICS = get_systematics(year)
lumi_rel_error = get_lumi_uncert(year)
args.systematics_components = parse_systematics(args.systematics_components)
figures = {}
category_scores = {}

mass_regions = MassRegions(
    low=args.low_mass_cut,
    high=args.high_mass_cut,
    high_sideband_in_control=args.high_sideband_in_control,
    mass_window_signal_region=False, #args.no_mmc,
    # not enough events to only train in signal region
    train_signal_region=False)

control_region = mass_regions.control_region
signal_region = mass_regions.signal_region
#signal_region = control_region # for creating control workspaces
train_region = mass_regions.train_region

categories = CATEGORIES[args.categories]
category_names = args.category_names
target_region = args.target_region

analysis = get_analysis(args)

output_suffix = analysis.get_suffix()

if args.mass_points == 'all':
    args.mass_points = Higgs.MASS_POINTS
else:
    args.mass_points = map(int, args.mass_points.split(','))

workspace_suffix = output_suffix
if args.workspace_suffix:
    workspace_suffix += '_' + args.workspace_suffix
workspace_suffix = workspace_suffix.lower()

silence = False

"""
Workspace functions
"""

def write_measurements(mass_category_channel, controls=None):
    log.info("writing measurements ...")
    if controls is None:
        controls = []
    workspace_output_dir = 'workspaces/hh%s' % workspace_suffix
    if os.path.exists(workspace_output_dir):
        shutil.rmtree(workspace_output_dir)
    os.mkdir(workspace_output_dir)
    for mass, category_channel in mass_category_channel.items():
        channels = []
        # make measurement for each category, including the control region in each
        for category, channel in category_channel.items():
            name = "hh_category_%s_%d" % (category, mass)
            log.info("writing {0} ...".format(name))
            # make measurement
            measurement = histfactory.make_measurement(
                name, [channel] + (
                    controls[mass].values() if isinstance(controls, dict) else controls),
                POI='SigXsecOverSM',
                lumi=1.0,
                lumi_rel_error=lumi_rel_error,
                const_params=CONST_PARAMS)
            with root_open(os.path.join(workspace_output_dir,
                '{0}.root'.format(name)), 'recreate') as workspace_file:
                # mu=1 for Asimov data
                #measurement.SetParamValue('SigXsecOverSM', 1)
                histfactory.write_measurement(measurement,
                    root_file=workspace_file,
                    xml_path=os.path.join(workspace_output_dir, name),
                    silence=silence)
            channels.append(channel)
        # make combined measurement
        name = "hh_combination_%d" % mass
        log.info("writing {0} ...".format(name))
        measurement = histfactory.make_measurement(
            name, channels + (
                controls[mass].values() if isinstance(controls, dict) else controls),
            POI='SigXsecOverSM',
            lumi=1.0,
            lumi_rel_error=lumi_rel_error,
            const_params=CONST_PARAMS)
        with root_open(os.path.join(workspace_output_dir,
            '{0}.root'.format(name)), 'recreate') as workspace_file:
            # mu=1 for Asimov data
            #measurement.SetParamValue('SigXsecOverSM', 1)
            histfactory.write_measurement(measurement,
                root_file=workspace_file,
                xml_path=os.path.join(workspace_output_dir, name),
                silence=silence)


def write_workspaces(mass_category_channel, controls=None):
    log.info("writing workspaces ...")
    if controls is None:
        controls = []
    workspace_output_dir = 'workspaces/hh%s' % workspace_suffix
    if os.path.exists(workspace_output_dir):
        shutil.rmtree(workspace_output_dir)
    os.mkdir(workspace_output_dir)
    for mass, category_channel in mass_category_channel.items():
        channels = []
        # make workspace for each category, including the control region in each
        for category, channel in category_channel.items():
            name = "hh_category_%s_%d" % (category, mass)
            log.info("writing {0} ...".format(name))
            # make workspace
            workspace, measurement = histfactory.make_workspace(
                name, [channel] + (
                    controls[mass].values() if isinstance(controls, dict) else controls),
                POI='SigXsecOverSM',
                lumi=1.0,
                lumi_rel_error=lumi_rel_error,
                const_params=CONST_PARAMS,
                silence=silence)
            with root_open(os.path.join(workspace_output_dir,
                '{0}.root'.format(name)), 'recreate') as workspace_file:
                workspace.Write()
                # mu=1 for Asimov data
                #measurement.SetParamValue('SigXsecOverSM', 1)
                histfactory.write_measurement(measurement,
                    root_file=workspace_file,
                    xml_path=os.path.join(workspace_output_dir, name),
                    silence=silence)
            channels.append(channel)
        # make combined workspace
        name = "hh_combination_%d" % mass
        log.info("writing {0} ...".format(name))
        workspace, measurement = histfactory.make_workspace(
            name, channels + (
                controls[mass].values() if isinstance(controls, dict) else controls),
            POI='SigXsecOverSM',
            lumi=1.0,
            lumi_rel_error=lumi_rel_error,
            const_params=CONST_PARAMS,
            silence=silence)
        with root_open(os.path.join(workspace_output_dir,
            '{0}.root'.format(name)), 'recreate') as workspace_file:
            workspace.Write()
            # mu=1 for Asimov data
            #measurement.SetParamValue('SigXsecOverSM', 1)
            histfactory.write_measurement(measurement,
                root_file=workspace_file,
                xml_path=os.path.join(workspace_output_dir, name),
                silence=silence)

    
def make_track_channels(categories, include_signal=False):
    # create control region Channels here
    control_analysis = Analysis(
        year=year,
        systematics=args.systematics,
        use_embedding=args.embedding,
        qcd_shape_region='SS',
        decouple_qcd_shape=args.decouple_qcd_shape,
        partition_key=analysis.partition_key,
        suffix=args.suffix,
        transform=not args.raw_scores,
        mpl=args.mpl)
    expr = ('tau1_numTrack_recounted', 'tau2_numTrack_recounted')
    # define the 2D boundaries and number of bins
    min_edge, max_edge = .5, 4.5
    bins = int(max_edge - min_edge)
    # define the histogram template
    hist_template = Hist2D(
        bins, min_edge, max_edge,
        bins, min_edge, max_edge, type='D')
    if not include_signal:
        channels = []
        for category in categories:
            parent_category = category.get_parent()
            # apply normalization
            control_analysis.normalize(parent_category)
            # clf = analysis.get_clf(parent_category, load=True)
            contr = control_analysis.get_channel(hist_template, expr,
                category=category,
                region='OS',
                #clf=clf,
                #cuts=signal_region,
                include_signal=False)
            channels.append(contr)
            # TODO check that number of SS events is consistent with nOS
    else:
        channels = {}
        for category in categories:
            parent_category = category.get_parent()
            # apply normalization
            control_analysis.normalize(parent_category)
            # clf = analysis.get_clf(parent_category, load=True)
            for mass in args.mass_points:
                contr = control_analysis.get_channel(hist_template, expr,
                    category=category,
                    region='OS',
                    #clf=clf,
                    #cuts=signal_region,
                    include_signal=True,
                    mass=mass,
                    mode='workspace')
                if mass not in channels:
                    channels[mass] = {}
                channels[mass][category.name] = contr
    return channels


def make_clf_channels(categories):
    all_channels = {}
    for category in categories:
        # apply normalization
        analysis.normalize(category)
        clf = analysis.get_clf(category, load=True)
        # construct a "channel" for each mass point
        scores, channels = analysis.clf_channels(
            clf, category, target_region,
            cuts=signal_region,
            bins=category.limitbins,
            mass_points=args.mass_points,
            mode='workspace',
            systematics=args.systematics,
            unblind=args.unblind or 0.3)
        for mass, channel in channels.items():
            if mass not in all_channels:
                all_channels[mass] = {}
            all_channels[mass][category.name] = channel
    return all_channels


COMBINATION_MAPPING = {
    'ATLAS_norm_HH12_QCD': 'ATLAS_norm_HH_2012_QCD',
    'ATLAS_norm_HH12_Ztt': 'ATLAS_norm_HH_2012_Ztt',
    'ATLAS_ANA_HH12_QCD': 'ATLAS_ANA_HH_2012_QCD',
    'ATLAS_TRIGGER_HH_2012_Emb': 'ATLAS_TRIGGER_EMB_HH_2012',
}

#fit = root_open('fit.root')
#ws = fit.combined
#ws.loadSnapshot('unconditional')
#mc = ws.obj('ModelConfig')
#nps = mc.nuisance_parameters
## hack names
#for np in nps:
#    if np.name in COMBINATION_MAPPING:
#        np.name = COMBINATION_MAPPING[np.name]

cat_defs = [args.categories]
if args.categories != 'presel':
    cat_defs.append(args.controls)

for category in analysis.iter_categories(*cat_defs, names=args.category_names):

    is_control = category.analysis_control

    if 'stability' in args.actions and not is_control:
        # add all stability plot making here
        # plot data with BDTs swapped and in normal order
        clf = analysis.get_clf(category, load=True, swap=False)
        clf_swap = analysis.get_clf(category, load=True, swap=True)
        scores, _ = clf.classify(analysis.data, category, target_region)
        scores_swap, _ = clf_swap.classify(analysis.data, category, target_region)

        from rootpy.plotting import Canvas, Hist, Legend
        fig = Canvas()
        fig.SetLogy()
        h = Hist(20, -1, 1, title='BDTs in normal order')
        h_swap = h.Clone(color='red', markerstyle='o', title='BDTs swapped')
        h.fill_array(scores)
        h_swap.fill_array(scores_swap)
        h.Draw()
        h_swap.Draw('same')
        h.yaxis.title = 'Events'
        h.xaxis.title = 'BDT Score'
        leg = Legend(2, pad=fig, leftmargin=0.3, textsize=20)
        leg.AddEntry(h)
        leg.AddEntry(h_swap)
        leg.Draw()
        fig.SaveAs('data_consistency_{0}.png'.format(category.name))

    if 'plot' in args.actions:
        figures[category.name] = {}
        cuts = Cut(args.plot_cut)

        if args.plot_expr is not None:
            VARS = {
                tuple(args.plot_expr.split(',')): {
                    'title': args.plot_name,
                    'range': (args.plot_min, args.plot_max),
                    'bins': args.plot_bins,
                    'filename': 'expr_' + args.plot_name.replace(' ', '_')}}
        else:
            VARS = VARIABLES

        figs = draw_channel_array(
            analysis,
            vars=VARS,
            mass=125,
            mode='combined',
            signal_scale=50 if is_control or 'preselection' in category.name else 20,
            plot_label='Signal Region' if not is_control and not ('preselection' in category.name) else None,
            category=category,
            region=target_region,
            systematics=SYSTEMATICS if args.systematics else None,
            systematics_components=args.systematics_components,
            mpl=args.mpl,
            output_formats=args.output_formats,
            weighted=not args.no_weight,
            plots=args.plots,
            output_suffix=output_suffix,
            unblind=args.unblind or is_control,
            cuts=cuts,
            fit=None) # vars at pre-fit
        figures[category.name] = figs

    if 'plotevolving' in args.actions:
        from copy import deepcopy    

        clf = analysis.get_clf(category, load=True)
        score_cuts = [-1.0, 0.0, 0.5, 0.9, 0.95, 0.987]

        override_vars = [
             'averageIntPerXing',
            'mmc0_mass',
            'dEta_jets',
            'dR_tau1_tau2',
            'jet1_pt',
            'jet1_eta',
            #'jet1_phi',
            'jet2_pt',
            'jet2_eta',
            #'jet2_phi',
            'tau1_pt',
            'tau1_eta',
            'tau1_phi',
            'tau2_pt',
            'tau2_eta',
            'tau2_phi',
        ]

        if args.plot_expr is not None:
            VARS_ORIGINAL = {tuple(args.plot_expr.split(',')):
                    {'title': args.plot_name,
                     'range': (args.plot_min, args.plot_max),
                     'bins': args.plot_bins,
                     'filename': 'expr_' + args.plot_name.replace(' ', '_')}}
        elif override_vars is not None:
            VARS_ORIGINAL = {}
            for v in override_vars:
                VARS_ORIGINAL[v] = VARIABLES[v]
        else:
            VARS_ORIGINAL = VARIABLES

        for sc in score_cuts:
            figures[category.name] = {}
            cuts = Cut(args.plot_cut)
            VARS = deepcopy(VARS_ORIGINAL)
            for v in VARS:
                VARS[v]['filename'] += '_minscore_' + str(sc)

            figs = draw_channel_array(
                analysis,
                vars=VARS,
                mass=125,
                mode='combined',
                signal_scale=1,
                category=category,
                region=target_region,
                show_qq=False,
                plot_signal_significance=False,
                systematics=SYSTEMATICS if args.systematics else None,
                systematics_components=args.systematics_components,
                mpl=args.mpl,
                output_formats=args.output_formats,
                weighted=not args.no_weight,
                plots=args.plots,
                output_suffix=output_suffix,
                unblind=args.unblind or is_control,
                cuts=cuts,
                clf=clf,
                min_score = sc,
                signal_on_top=True,
            )
            figures[category.name] = figs

    if 'massplot' in args.actions:
        cuts = Cut(args.plot_cut)
        draw_channel_array(
            analysis,
            vars={MMC_MASS: VARIABLES[MMC_MASS]},
            mass=Higgs.MASS_POINTS[::2],
            mode='combined',
            signal_scale=50,
            stacked_signal=False,
            signal_colour_map=cm.jet,
            category=category,
            region=target_region,
            show_qq=False,
            plot_signal_significance=False,
            systematics=SYSTEMATICS if args.systematics else None,
            systematics_components=args.systematics_components,
            mpl=args.mpl,
            output_formats=args.output_formats,
            weighted=not args.no_weight,
            plots=args.plots,
            output_suffix=output_suffix,
            unblind=args.unblind or is_control,
            cuts=cuts)
    
    if 'weights' in args.actions:
        cuts = Cut(args.plot_cut)
        draw_samples_array(
            WEIGHTS,
            data=analysis.data,
            model=analysis.backgrounds,
            signal=[analysis.higgs_125],
            signal_scale=50,
            category=category,
            region=target_region,
            show_ratio=False,
            show_qq=False,
            plot_signal_significance=False,
            systematics=None,
            mpl=args.mpl,
            output_formats=args.output_formats,
            output_suffix=output_suffix,
            weighted=False,
            stacked_model=False,
            cuts=cuts)

    if 'train' in args.actions and not is_control:
        # all modes, all masses
        signals_train = [
            Higgs(
                year=year,
                mass=125,
                modes=category.train_signal_modes,
                systematics=args.systematics),
        ]

        clf = analysis.get_clf(category, load=False)
        
        clf.train(
            signals=signals_train,
            backgrounds=analysis.backgrounds,
            cuts=train_region,
            grid_search=args.grid_search,
            cv_nfold=args.nfold,
            use_cache=args.use_clf_cache)
    
    if 'money' in args.actions and not is_control:

        scores = analysis.get_scores(clf, category, target_region,
                mode='combined', mass_points=[125],
                systematics=args.systematics,
                unblind=True)

        from rootpy.plotting import Hist, Canvas, HistStack
        from mva.classify import histogram_scores
        from mva.stats.utils import significance
        from itertools import izip

        b = Hist(1000, scores.min_score, scores.max_score)
        s = b.Clone()
        data = b.Clone()
        for sample, bkg_scores in scores.bkg_scores:
            histogram_scores(b, bkg_scores, inplace=True)
        for sample, sig_scores in scores.all_sig_scores[125]:
            histogram_scores(s, sig_scores, inplace=True)
        histogram_scores(data, scores.data_scores, inplace=True)

        # get min and max significance
        sig, _, _ = significance(s, b)
        min_sig, max_sig = sig.min(), sig.max()
        log.warning("{0} {1}".format(min_sig, max_sig))
        sig_money = Hist(10, min_sig, max_sig + 1E-5,
            drawstyle='hist',
            fillstyle='solid')
        bkg_money = sig_money.Clone()
        data_money = sig_money.Clone()

        for bin, _s in izip(s.bins(), sig):
            sig_money.Fill(_s, bin.value)
        for bin, _b in izip(b.bins(), sig):
            bkg_money.Fill(_b, bin.value)
        for bin, _d in izip(data.bins(), sig):
            data_money.Fill(_d, bin.value)

        bkg_money.color = 'blue'
        sig_money.color = 'red'

        c = Canvas()
        c.SetLogy()
        stack = HistStack()
        stack.Add(bkg_money)
        stack.Add(sig_money)
        stack.Draw()
        stack.xaxis.title = 'S / #sqrt{S + B}'
        stack.yaxis.title = 'Events'
        stack.SetMinimum(15)
        stack.SetMaximum(700)
        stack.Draw()
        stack.yaxis.SetRangeUser(15, 700)
        stack.yaxis.SetLimits(15, 700)
        data_money.Draw('same E0')
        c.SaveAs('money_{0}.png'.format(category.name))


    if '2d' in args.actions and not is_control:
        log.info("plotting 2d mass vs classifier output")
        clf = analysis.get_clf(category, load=True)
        draw_2d_hist(
            clf,
            category,
            target_region,
            analysis.backgrounds,
            signals=analysis.signals,
            data=analysis.data,
            cuts=signal_region,
            y='mass_mmc_tau1_tau2',
            output_suffix=output_suffix)

    if 'correlate' in args.actions and not is_control:
        log.info("drawing correlation matrices")
        # TODO
        # create correlation matrices for signal, background
        # and background and data in a control region
        clf = analysis.get_clf(category, load=True)
        fields = clf.all_fields[:]
        fields.remove(MMC_MASS)
        fields.append(MMC_MASS)
        bkg_arrs, sig_arrs = analysis.arrays(category, target_region,
            fields=fields,
            clf=clf, clf_name='BDT')
        # get combined background and signal arrays
        background = np.vstack([bkg_arrs[b] for b in bkg_arrs.keys()])
        signal = np.vstack([sig_arrs[b] for b in sig_arrs.keys()])
        fields += ['weight', 'BDT']
        for i, field in enumerate(fields):
            if field in VARIABLES:
                scale = VARIABLES[field].get('scale', None)
                if scale is not None:
                    background[:,i] *= scale
                    signal[:,i] *= scale

        correlations(
            signal, signal[:,-2],
            background, background[:,-2],
            fields=fields,
            category=category,
            output_suffix=output_suffix)

        # plot 2D contour of mass vs BDT
        fig = plt.figure()
        bkg_hist = Hist2D(20, 50, 200, 20, -1, 1)
        sig_hist = bkg_hist.Clone()
        bkg_hist.fill_array(background[:,[-3, -1]], background[:,-2])
        bkg_hist /= bkg_hist.GetMaximum()
        sig_hist.fill_array(signal[:,[-3, -1]], signal[:,-2])
        sig_hist /= sig_hist.GetMaximum()
        rplt.contour(bkg_hist, zoom=2, levels=[0.05, 0.2, 0.4, 0.6, 0.8],
            cmap=cm.get_cmap('Blues'))
        rplt.contour(sig_hist, zoom=2, levels=[0.05, 0.2, 0.4, 0.6, 0.8],
            cmap=cm.get_cmap('Reds'))
        plt.ylabel('BDT')
        plt.xlabel(VARIABLES[MMC_MASS]['title'])
        fig.savefig('mass_vs_bdt_%s%s.png' % (category.name, output_suffix),
            bbox_inches='tight')

        # plot full contour matrix
        plot_contour_matrix([background, signal],
            fields=[
                VARIABLES[field]['title'] if field in VARIABLES else field
                    for field in fields],
            filename='contours_%s%s.png' % (category.name, output_suffix),
            weights=[background[:,-2], signal[:,-2]],
            sample_names=['Background', 'Signal'])

    if 'scatter' in args.actions and not is_control:
        # show 2D plots of all input variables and with BDT output
        log.info("drawing scatter plots of input variables")
        clf = analysis.get_clf(category, load=True)
        draw_scatter(
            clf.all_fields,
            category,
            target_region,
            output_suffix,
            analysis.backgrounds,
            data=analysis.data,
            signals=analysis.signals,
            signal_scale=300.,
            classifier=clf if 'train' in args.actions else None,
            unblind=args.unblind)

    if 'evaluate' in args.actions and not is_control:
        # create BDT validation plots
        clf.evaluate(
            analysis,
            signal_region=signal_region,
            control_region=control_region,
            unblind=args.unblind,
            systematics=SYSTEMATICS if args.systematics else None,
            output_formats=args.output_formats,
            signal_scale=50,
            fit=nps)

        #category_scores[category.name] = (bkg_scores, sig_scores)

    
if 'workspace' in args.actions:
    #controls = make_track_channels(
    #    CATEGORIES['mva_workspace_controls'],
    #    include_signal=False)
    if args.constrain_norms:
        controls = []
    else:
        hist_template = Hist(10, 0, 1.5, type='D')
        controls = make_var_channels(
            hist_template,
            'dEta_tau1_tau2',
            CATEGORIES['mva_workspace_controls'],
            include_signal=True)
    mass_category_channel = make_clf_channels(CATEGORIES[args.categories])
    write_workspaces(mass_category_channel, controls)


categories = CATEGORIES['mva_all']

if 'track-workspace' in args.actions:
    mass_category_channel = make_track_channels(
        categories,
        include_signal=True)
    write_workspaces(mass_category_channel)

if 'deta-workspace' in args.actions:
    hist_template = Hist(10, 0, 1.5, type='D')
    mass_category_channel = make_var_channels(
        hist_template,
        'dEta_tau1_tau2',
        categories,
        include_signal=True)
    write_workspaces(mass_category_channel)

if 'bdt-workspace' in args.actions:
    mass_category_channel = make_clf_channels(categories)
    write_workspaces(mass_category_channel)


if 'mass-workspace' in args.actions:
    hist_template = Hist(30, 50, 200, type='D')
    
    channels = {}
    for category in analysis.iter_categories(args.categories):

        clf = analysis.get_clf(category, load=True)
        scores = analysis.get_scores(
            clf, category, target_region, cuts=signal_region,
            mass_points=[125], mode='combined',
            systematics=False,
            unblind=True)

        bkg_scores = scores.bkg_scores
        sig_scores = scores.all_sig_scores[125]
        min_score = scores.min_score
        max_score = scores.max_score
        
        bkg_score_hist = Hist(category.limitbins, min_score, max_score, type='D')
        sig_score_hist = bkg_score_hist.Clone()
        hist_scores(bkg_score_hist, bkg_scores)
        _bkg = bkg_score_hist.Clone()
        hist_scores(sig_score_hist, sig_scores)
        _sig = sig_score_hist.Clone()
        sob_hist = (1 + _sig / _bkg)
        _log = math.log
        for bin in sob_hist.bins(overflow=True):
            bin.value = _log(bin.value)
        log.info(str(list(sob_hist.y())))
        
        for mass in Higgs.MASS_POINTS:
            channel = analysis.get_channel_array(
                {MMC_MASS: VARIABLES[MMC_MASS]},
                templates={MMC_MASS: hist_template},
                category=category,
                region=target_region,
                cuts=signal_region,
                include_signal=True,
                weight_hist=sob_hist,
                clf=clf,
                mass=mass,
                scale_125=False, # CHANGE
                mode='workspace',
                systematics=args.systematics)[MMC_MASS]
            if mass not in channels:
                channels[mass] = {}
            channels[mass][category.name] = channel
    write_workspaces(channels)


if '2d-mass-workspace' in args.actions:
    hist_template = Hist2D(250, 0, 250, 200, -1, 1, type='D')
    channels = {}
    for category in analysis.iter_categories(args.categories):
        clf = analysis.get_clf(category, load=True)
        for mass in args.mass_points:
            channel = analysis.get_channel_array(
                {MMC_MASS: hist_template},
                category=category,
                region=target_region,
                cuts=signal_region,
                clf=clf,
                include_signal=True,
                mass=mass,
                mode='workspace',
                systematics=args.systematics,
                ravel=False)[MMC_MASS]
            if mass not in channels:
                channels[mass] = {}
            channels[mass][category.name] = channel
    #write_workspaces(channels) # slow with this many bins
    write_measurements(channels)


if 'cuts-workspace' in args.actions:
    channels = {}
    for category in analysis.iter_categories('cuts'):
        hist_template = Hist(category.limitbins, type='D')
        for mass in args.mass_points:
            channel = analysis.get_channel_array(
                {MMC_MASS: hist_template},
                category=category,
                region=target_region,
                cuts=None,
                include_signal=True,
                mass=mass,
                mode='workspace',
                systematics=args.systematics,
                uniform=True)[MMC_MASS]
            if mass not in channels:
                channels[mass] = {}
            channels[mass][category.name] = channel
    write_workspaces(channels)
