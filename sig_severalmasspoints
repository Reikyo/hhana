#!/usr/bin/env python

# --> python imports
import os
import cPickle as pickle

# --> rootpy imports
from rootpy.io import root_open
from rootpy.plotting import Canvas

# --> ROOT imports
import ROOT

# --> local imports
from mva import CACHE_DIR,log
from mva.cmd import get_parser
from statstools import get_significance_workspace
from statstools.pvalue_plot import pvalue_plot

# --> Argument parser
parser = get_parser(actions=False)
parser.add_argument('--verbose', action='store_true', default=False)
parser.add_argument('--force-pickle', action='store_true', default=False)
parser.add_argument('workspace_dir')
parser.add_argument('--workspace-basename', default='hh_combination')
args = parser.parse_args()

#-----------------------------------
def read_significances(significances_file):
    """
    Use the pickle module to extract the
    information stored in the pickle file
    and dump it into a dictionnary.
    -----------
    parameter: pickle file name
    """

    significances = {}
    if os.path.isfile(significances_file):
        log.info("reading significances from %s" % significances_file)
        with open(significances_file) as cached_significances:
            significances = pickle.load(cached_significances)
    return significances

#----------------------------------------------
def write_significances( significances_file,files_list,ws_list,masses_list):
    # -------------------------
    if not files_list:
        raise ValueError("files_list is empty")
    if not ws_list:
        raise ValueError("ws_list is empty")
    if not masses_list:
        raise ValueError("masses_list is empty")

    # -------------------------
    if not isinstance( files_list, (list, tuple) ):
        files_list = [files_list]
    if not isinstance( ws_list, (list, tuple) ):
        ws_list = [ws_list]
    if not isinstance( masses_list, (list, tuple) ):
        masses_list = [masses_list]

    # -------------------------
    significances = {}
    for file,ws,mass in zip(files_list,ws_list,masses_list):
        log.info( '============================================' )
        log.info ( 'File: %s'%file )
        log.info ( 'Workspace: %s'%ws )
        log.info ( 'Tested mass: %d'%mass )
        with root_open(file) as f:
            if ws not in f:
                f.ls()
            else:
                h = get_significance_workspace( f[ws], 
                                                verbose=args.verbose,
                                                blind = not args.unblind )
                log.info ( 'Tested mass: %d'%mass )
                log.info( list(h.y()))
                log.info( list(h.y())[1] )
                significances[mass] = list(h.y())[1]
    log.info('Write to '+significances_file)
    with open(significances_file, 'w') as significances_file:
        pickle.dump(significances, significances_file)



# --------------------------------------------------------
# ------------------ MAIN DRIVER
# --------------------------------------------------------
pickle_file = (args.workspace_dir+'_'+args.workspace_basename+'.pickle')
pickle_file = pickle_file.replace( '/','_')
SIGNIFICANCES_FILE = os.path.join(CACHE_DIR,pickle_file)
log.info( 'Write result to %s'%SIGNIFICANCES_FILE )
args.mass_points = map(int, args.mass_points.split(','))
log.info ( 'Mass points tested %s'%str(args.mass_points) )

# --- Create the files/WS/tested mass lists
masses_list = args.mass_points
ws_list = []
files_list = []
for mass in masses_list:
    file = args.workspace_dir+'/'+args.workspace_basename+'_%d.root'%mass
    ws = 'workspace_'+args.workspace_basename+'_%d'%mass
    files_list.append( file )
    ws_list.append( ws )

# --- Write the significances into the pickle file
# --- do it only if the file does not exist or if the force_pickle argument is called
if os.path.isfile(SIGNIFICANCES_FILE) and not args.force_pickle:
    log.warning( '%s already exists, significances are not recomputed'%SIGNIFICANCES_FILE)
else:
    write_significances( SIGNIFICANCES_FILE,files_list,ws_list,masses_list )

# --- plot the significances
significances_dict = read_significances( SIGNIFICANCES_FILE )
pvalues_exp = []
for mass in masses_list :
    pval_temp = ROOT.Math.gaussian_cdf_c(significances_dict[mass])
    pvalues_exp.append( pval_temp )

c = Canvas()
pvalue_plot(masses_list,pvalues_exp,c,xtitle='m_{H} [GeV]')
for fmt in args.output_formats:
    c.SaveAs('plots/pvalue.%s'%fmt)
