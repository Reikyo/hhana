#!/usr/bin/env python
"""
https://twiki.cern.ch/twiki/bin/viewauth/AtlasProtected/HiggsCrossSection
https://dgillber.web.cern.ch/dgillber/Higgs_pT_reweigh/
https://twiki.cern.ch/twiki/bin/view/AtlasProtected/HiggsPTReWeighting
"""
import sys
import os
import shutil
from rootpy.io import root_open
from rootpy.tree import TreeModel, FloatCol
import numpy as np
from root_numpy import array2tree
import logging
from multiprocessing import Process
import ROOT

log = logging.getLogger('higgs-pt')

HERE = os.path.dirname(os.path.abspath(__file__))
data = os.path.join(HERE, 'dat/Higgs_pT_Njets_reweighing_April2014-3_7TeV.root')
uncert_data = os.path.join(HERE, 'dat/HRes_HpT_uncert.root')

WEIGHT = {}
with root_open(data) as dat:
    WEIGHT[7] = (dat.Reweigh_PowPy6_To_HRes2Dynamic_01jets,
                 dat.Reweigh_PowPy6_To_HRes2Dynamic_geq2jets)
    WEIGHT[8] = (dat.Reweigh_Powheg_To_HRes2Dynamic_01jets,
                 dat.Reweigh_Powheg_To_HRes2Dynamic_geq2jets)
    for hist in WEIGHT[7] + WEIGHT[8]:
        hist.SetDirectory(0)

with root_open(uncert_data) as dat:
    UNCERT = dat.HRes_upper_envelope
    UNCERT.SetDirectory(0)

# temporary extra correction for 7 TeV
# https://twiki.cern.ch/twiki/bin/view/AtlasProtected/HiggsPTReWeighting
TEMP_CORRECTION = ROOT.TF1("p", "pol4", 0, 300)
TEMP_CORRECTION.SetParameters(0.929366,-0.00172232,9.57166e-05,-5.89646e-07,1.07189e-09)


class Job(Process):
    def __init__(self, filename):
        super(Job, self).__init__()
        self.filename = filename

    def run(self):
        filename = self.filename
        path, name = os.path.split(filename)
        # copy to new file
        output = os.path.join(path, 'weighted.' + name)
        if os.path.exists(output):
            return 
        log.info("copying {0} to {1} ...".format(filename, output))
        shutil.copy(filename, output)
        energy = 8 if 'mc12' in name else 7
        with root_open(output, 'UPDATE') as file:
            tree = file.tau
            if '_ggH' in name:
                log.info("adding {0} TeV weights to {1} ...".format(
                    energy, output))
                add_weights(tree, energy)
            else:
                log.info("adding unit weights to {0} ...".format(output))
                array = np.array(np.ones(len(tree)), 
                                 dtype=np.dtype([
                                     ('ggf_weight', 'float32'),
                                     ('ggf_weight_high', 'float32'),
                                     ('ggf_weight_low', 'float32')]))
                array2tree(array, tree=tree)
            tree.Write(tree.name, ROOT.TObject.kOverwrite)


def add_weights(tree, energy):
    tree.create_buffer()

    class Model(TreeModel):
        ggf_weight = FloatCol()
        ggf_weight_high = FloatCol()
        ggf_weight_low = FloatCol()

    tree.set_buffer(Model(), create_branches=True)
    branches = [tree.GetBranch(b) for b in [
        'ggf_weight', 'ggf_weight_high', 'ggf_weight_low']]
    weights_01, weights_2 = WEIGHT[energy]
    for event in tree:
        # MeV -> GeV
        pt = tree.true_resonance_pt / 1E3
        if tree.num_true_jets_no_overlap < 2:
            weight = weights_01.Interpolate(pt)
        else:
            weight = weights_2.Interpolate(pt)
        # temporary extra correction for 7 TeV
        # https://twiki.cern.ch/twiki/bin/view/AtlasProtected/HiggsPTReWeighting
        if energy == 7:
            weight *= 0.8973091 / TEMP_CORRECTION.Eval(pt)
        uncert = UNCERT.Interpolate(pt)
        tree.ggf_weight = weight
        tree.ggf_weight_high = weight * uncert
        tree.ggf_weight_low = weight * (2 - uncert)
        for branch in branches:
            branch.Fill()
    tree.SetEntries(-1)


if __name__ == '__main__':
    from rootpy.extern.argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument('files', nargs='+')
    args = parser.parse_args()

    from statstools.jobs import run_pool
    
    jobs = [Job(f) for f in args.files]
    run_pool(jobs, n_jobs=-1)
