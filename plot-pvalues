#!/usr/bin/env python
# python imports
import pickle
import os
import logging
# ROOT/rootpy imports
import ROOT
from rootpy.plotting import Canvas, Legend, set_style
from rootpy.plotting.style.atlas.labels import ATLAS_label
# local imports
from mva import save_canvas
from mva.categories import CATEGORIES
from statstools.plotting import pvalue_plot, parse_name, get_category

log = logging.getLogger(os.path.basename(__file__))
set_style('ATLAS', shape='rect')
gaus_cdf = ROOT.Math.gaussian_cdf_c


masses = range(100, 155, 5)
colors = ['black', 'red', 'blue', 'purple', 'darkgreen']
lines = ['dashed', 'solid', 'dotted', 'dashdot', 'longdash', 'verylongdash']


def get_sigs(path, category, year=None, meas=True, blind=True, profile='0'):
    if year is None:
        dir_pattern = 'hh_{0}_{{0}}'.format(category)
    else:
        dir_pattern = 'hh_{0}_{1}_{{0}}'.format(year % 1000, category)
    sigs = []
    for mass in masses:
        dirname = dir_pattern.format(mass)
        if blind:
            filename = '{1}{0}.pickle'.format(dirname, 'measurement_' if meas else '')
        else:
            filename = '{1}{0}_observed.pickle'.format(dirname, 'measurement_' if meas else '', profile)
        with open(os.path.join(path, dirname, filename), 'r') as pickle_file:
            sig_dict = pickle.load(pickle_file)
            sigs.append(sig_dict['combined'][0])
    return sigs


def plot(cat, year, curves, labels):
    c = Canvas()
    log.info(labels)
    _, graphs = pvalue_plot(
        masses, curves, pad=c, xtitle='m_{H} [GeV]',
        linestyle=lines, linecolor=colors,
        yrange=(gaus_cdf(3.5), 50))
    for label, graph in zip(labels, graphs):
        graph.title = label
        graph.legendstyle = 'L'
        log.info( '-------- {0} -------'.format(graph.title))
        log.info(['{0:1.1f}'.format(xval) for xval in list(graph.x())])
        log.info(['{0:0.3f}'.format(yval) for yval in list(graph.y())])


    leg = Legend(graphs, 
                 margin=0.15,
                 textsize=20)
    leg.Draw()
    lat = ROOT.TLatex(c.GetLeftMargin()+0.02, 1-c.GetTopMargin()-0.05, cat.label)
    lat.SetNDC(True)
    lat.SetTextSize(20)
    lat.Draw()
    ATLAS_label(0.75, 0.88, text="Internal", sqrts=None, pad=c, sep=0.09)
    save_canvas(c, 'plots/pvalues', cat.name+'_'+str(year), formats=('.eps', '.png'))

if __name__ == '__main__':
    from rootpy.extern.argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument('--unblind', action='store_true', default=False)
    parser.add_argument('--year', default=12, choices=['11', '12'])
    args = parser.parse_args()

    # This part need to be updated manually - TODO: implement automatisation
    path = 'workspaces/hh_nos_nonisol_ebz_stat_cuts_uniformentriesdixed_binning_test_fixed/'
    categories = CATEGORIES['cuts']

    cat_names = []
    for dir in os.listdir(path):
        if os.path.isdir(os.path.join(path, dir)):
            year, cat_name, mass = parse_name('channel_'+dir)
            log.info('Year: {0}, Cat: {1}, Mass: {2}'.format(year, cat_name, mass))
            if not cat_name in cat_names:
                cat_names.append(cat_name)
    log.info(cat_names)
    for cat_name in cat_names:
        if cat_name == 'combination':
            # TODO: Fix the combination
            continue
        sigs = []
        exp = get_sigs(
            path, 
            cat_name, 
            year=args.year, 
            meas=True, 
            blind=True)
        sigs.append(exp)
        if args.unblind:
            obs = get_sigs(
                path, 
                cat_name, 
                year=args.year, 
                meas=True, 
                blind=False)
            sigs.append(obs)

        pvals = []
        for sig in sigs:
            pvals.append(map(gaus_cdf, sig))
        category = get_category(cat_name, categories)
        log.info(category)
        plot(category, args.year, pvals, ['Expected', 'Observed'])

# # 8TeV combination
# bdt_combined_12 = map(gaus_cdf, get_sigs(bdt_path, 'combination', year=12))
# cut_combined_12 = map(gaus_cdf, get_sigs(cut_path, 'combination', year=12))
# plot('combination_12', [bdt_combined_12, cut_combined_12], ['MVA 8 TeV', 'CBA 8 TeV'])

