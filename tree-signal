#!/usr/bin/env python
"""
Compare the signal sample with and without
the Multiple Perturbative Parton-Parton Interaction (MPI)
http://skands.web.cern.ch/skands/slides/oregon-skands.pdf
"""
# python imports
from tabulate import tabulate
from argparse import ArgumentParser
import os
import logging
import numpy as np
from numpy.lib import recfunctions
# ROOT/rootpy/root_numpy imports
from rootpy.io import root_open
from rootpy.tree import Cut
from rootpy.plotting import Hist
from root_numpy import fill_hist, array2tree, stack
# local imports
from higgstautau.datasets import Database
#from mva.analysis import Analysis
from mva.samples import Higgs
from mva.categories import CATEGORIES
from mva.defaults import TARGET_REGION
from mva.plotting import draw_ratio
from mva.variables import VARIABLES
from mva import CACHE_DIR, MMC_MASS

log = logging.getLogger(os.path.basename(__file__))

parser = ArgumentParser()


fields = ['EventNumber', 'RunNumber', 'mmc1_mass']
fields_names = ['EvtNum', 'RunNum', 'MMC_raw', 'weight']

def binned_rec(rec, hist):
    """
    Transform a 1D array of values into
    a 1D array of histogram bins centers
    """
    if len(rec) == 0:
        return rec
    indices = fill_hist(hist, rec, return_indices=True)
    uni_hist = hist.uniform_binned()
    return np.take(list(uni_hist.x(overflow=True)), indices)


def get_records(sample, category, target_region,
                binned_field, binned_field_name, hist,
                category_type, clf=None):
    # get the record array
    rec = sample.merged_records(
        category, target_region, fields=fields,
        include_weight=True, clf=clf, clf_name='BDT_raw')
    # rename fields
    if clf is not None:
        rec.dtype.names = fields_names + ['BDT_raw']
    else:
        rec.dtype.names = fields_names
    # rebin field of interest
    binned_array = binned_rec(rec[binned_field], hist)
    # category index
    index_array = np.empty(len(rec), dtype=int)
    index_array.fill(category.jk_number)
    # category type
    type_array = np.ones(len(rec), dtype=int)
    # merge fields
    rec = recfunctions.rec_append_fields(
        rec, data=[binned_array, index_array, type_array],
        names=[binned_field_name, 
               'cat{0}'.format(category_type),
               'Is{0}'.format(category_type)],
        dtypes=['f4', 'i4', 'i4'])
    return rec

if __name__ == '__main__':
    # rootpy imports
    from rootpy.extern.argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument('--mode', default='gg', choices=('gg', 'VBF'))
    parser.add_argument('--categories', default='mva', choices=('mva', 'cuts'))
    args = parser.parse_args()
    # local imports
    from mva.analysis import Analysis
    from mva.categories import CATEGORIES, Category_Preselection

    analysis = Analysis(2012)
    analysis.normalize(Category_Preselection)
    
    higgs_th = Higgs(
        2012, mass=125, mode=args.mode,
        ggf_weight=False,
        force_reopen=True,
        ntuple_path='/cluster/data12/qbuat/ntuples_hh/hhskim_ue/prod_v40/')

    recs = []
    for category in CATEGORIES[args.categories]:
        clf = analysis.get_clf(
            category, load=True,
            mass=125, transform=True)

        bdt_bins = clf.binning(analysis.year, overflow=1E5) 
        hist = Hist(bdt_bins)
        rec = get_records(higgs_th, category, analysis.target_region,
                          'BDT_raw', 'BDT',
                          hist, 'MVA', clf)
        log.info(rec.dtype.names)
        log.info(type(rec.dtype.names))
        mva_recs.append(rec)

    combined_rec = stack(mva_recs, fields=list(rec.dtype.names)) 

    with root_open('hh_signal.root', 'recreate') as out:
        outtree = array2tree(combined_rec, name='higgs') 
        outtree.Write()
