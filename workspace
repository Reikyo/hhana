#!/usr/bin/env python

from rootpy.plotting import Hist, Hist2D
from rootpy.io import root_open

from mva.analysis import get_analysis
from mva.categories import CATEGORIES
from mva import CACHE_DIR, MMC_MASS
from mva import log

import pickle
import math
import os


def bdt_workspace(analysis, categories, masses,
                  unblind=False,
                  systematics=False):
    hist_template = Hist(5, 0, 1.5, type='D')
    controls = analysis.make_var_channels(
        hist_template, 'dEta_tau1_tau2',
        CATEGORIES['mva_workspace_controls'],
        analysis.target_region,
        include_signal=True, masses=masses)
    mass_category_channel = {}
    for category in analysis.iter_categories(categories):
        
        #### TODO: SET MASS using 125 for all points for now
        clf = analysis.get_clf(category, load=True, mass=125)
        # get the binning (see the optimize-binning script)
        with open(os.path.join(CACHE_DIR, 'binning/binning_{0}_{1}_{2}.pickle'.format(
                               category.name, 125, 12))) as f:
            binning = pickle.load(f)
        ####

        log.info("binning: {0}".format(str(binning)))
        # construct a "channel" for each mass point
        scores, channels = analysis.clf_channels(
            clf, category,
            region=analysis.target_region,
            bins=binning,
            masses=masses,
            mode='workspace',
            systematics=systematics,
            unblind=unblind or 0.3,
            uniform=True)
        for mass, channel in channels.items():
            if mass not in mass_category_channel:
                mass_category_channel[mass] = {}
            mass_category_channel[mass][category.name] = channel
    return mass_category_channel, controls


def cuts_workspace(analysis, categories, masses,
                   unblind=False,
                   systematics=False):
    channels = {}
    for category in analysis.iter_categories(categories):
        if isinstance(category.limitbins, dict):
            binning = category.limitbins[year]
        else:
            binning = category.limitbins
        hist_template = Hist(binning, type='D')
        for mass in masses:
            channel = analysis.get_channel_array(
                {MMC_MASS: hist_template},
                category=category,
                region=analysis.target_region,
                cuts=None,
                include_signal=True,
                mass=mass,
                mode='workspace',
                systematics=systematics,
                uniform=True)[MMC_MASS]
            if mass not in channels:
                channels[mass] = {}
            channels[mass][category.name] = channel
    return channels, []


if __name__ == '__main__':
    import sys
    from mva import cmd
    from mva.samples import Higgs
    from mva.workspace import write_workspaces

    parser = cmd.analysis_parser(cmd.general_parser(
        multi_years=True, multi_categories=True))
    parser.add_argument('type', choices=('bdt', 'cuts'), default='bdt')
    args = parser.parse_args()

    if args.masses == 'all':
        args.masses = Higgs.MASSES
    else:
        args.masses = map(int, args.masses.split(','))
    
    if args.type == 'bdt':
        workspace_func = bdt_workspace
    else:
        workspace_func = cuts_workspace
    
    years = args.years
    categories = args.categories
    if len(categories) == 1 and len(years) > 1:
        categories = categories * len(years)
    elif len(categories) != len(years):
        sys.exit("specify the same number of category definitions as years")

    signal_regions = {}
    control_regions = {}
    for year, year_categories in zip(years, categories):
        analysis = get_analysis(args, year=year)
        sr, cr = workspace_func(analysis, year_categories, args.masses,
                                unblind=args.unblind,
                                systematics=args.systematics)
        signal_regions[year] = sr
        control_regions[year] = cr

    suffix = analysis.get_suffix(year=False)
    if args.output_suffix:
        suffix += '_' + args.output_suffix
    path = 'workspaces/hh{0}'.format(suffix.lower())
    write_workspaces(path, 'hh', signal_regions, controls=control_regions)
