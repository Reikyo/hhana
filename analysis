#!/usr/bin/env python

from mva.cmd import get_parser

args = get_parser().parse_args()
year = args.year

# stdlib imports
import pickle
from pprint import pprint
import os

# rootpy imports
from rootpy.plotting import Hist
from rootpy.io import open as ropen

# root imports
import ROOT

# numpy imports
import numpy as np

# local imports
from mva import log, variables, plots_dir, samples
from mva.stats import hypotests
from mva.plotting import *
from mva.samples import *
from mva.utils import make_multipage_pdf
from mva.norm import qcd_ztautau_norm
from mva.classify import *
from mva.systematics import SYSTEMATICS
from mva.categories import MassRegions, CATEGORIES
from mva.variables import VARIABLES


PLOTS_DIR = plots_dir(__file__)

if args.embedding:
    ztautau = Embedded_Ztautau(
            year=year,
            systematics=args.systematics)
else:
    ztautau = MC_Ztautau(
            year=year,
            systematics=args.systematics)
others = Others(
        year=year,
        systematics=args.systematics)
data = Data(
        year=year,
        markersize=1.2)

higgs_125 = Higgs(
        year=year,
        mass=125,
        systematics=args.systematics,
        scale=50,
        linecolor='red')

figures = {}
category_scores = {}

output_suffix = '_%sfit' % args.fit_param
if args.embedding:
    output_suffix += '_embedding'
if args.suffix:
    output_suffix += '_%s' % args.suffix
output_suffix += '_%d' % (year % 1E3)

mass_regions = MassRegions(
        low=args.low_mass_cut,
        high=args.high_mass_cut,
        high_sideband_in_control=args.high_sideband_in_control)

control_region = mass_regions.control_region
signal_region = mass_regions.signal_region
train_region = mass_regions.train_region

for category, cat_info in sorted(CATEGORIES.items(), key=lambda item: item[0]):

    if category not in args.categories:
        continue

    log.info("")
    log.info("=" * 40)
    log.info("%s category" % category)
    log.info("=" * 40)
    log.info("Cuts: %s" % cat_info['cuts'])
    
    # QCD shape region SS or !OS
    qcd_shape_region = cat_info['qcd_shape_region']
    target_region = cat_info['target_region']
    
    figures[category] = {}

    qcd = QCD(data=data, mc=[others, ztautau],
          shape_region=qcd_shape_region)
    
    qcd.scale = 1.
    ztautau.scale = 1.

    backgrounds = [
        qcd,
        others,
        ztautau,
    ]

    # determine normalization of QCD and Ztautau
    # in each category separately
    qcd_ztautau_norm(
        year=year,
        ztautau=ztautau,
        others=others,
        qcd=qcd,
        data=data,
        category=category,
        target_region=target_region,
        mass_regions=mass_regions,
        bins=cat_info['fitbins'],
        draw=args.draw_fit,
        use_cache=args.use_fit_cache,
        param=args.fit_param,
        systematics=SYSTEMATICS.values() if args.systematics else None,
        root=args.root)
    
    if 'plot' in args.actions:
        cuts = Cut(args.plot_cut)

        if args.plot_expr is not None:
            VARS = {tuple(args.plot_expr.split(',')):
                    {'title': args.plot_name,
                     'range': (args.plot_min, args.plot_max),
                     'bins': args.plot_bins,
                     'cats': ['GGF'],
                     'filename': 'expr_' + args.plot_name.replace(' ', '_')}}
        else:
            VARS = VARIABLES

        for expr, var_info in VARS.items():

            if category in args.categories and category.upper() not in var_info['cats']:
                continue
            elif args.plots and expr not in args.plots:
                continue

            log.info("")
            log.info("plotting %s in %s category" % (expr, category))
            log.info(cat_info['cuts'] & cuts)

            bins = var_info['bins']
            min, max = var_info['range']
            hist_template = Hist(bins, min, max)

            if 'scale' in var_info:
                expr = "%s * %f" % (expr, var_info['scale'])

            output_name = var_info['filename'] + output_suffix
            if cuts:
                output_name += '_' + cuts.safe()

            fig = draw_samples(
                    hist_template=hist_template,
                    expr=expr,
                    data=data if not var_info.get('blind', False) or args.unblind else None,
                    model=backgrounds,
                    signal=[higgs_125],
                    name=var_info['root'] if args.root else var_info['title'],
                    output_name=output_name,
                    category_name=cat_info['name'],
                    category=category,
                    region=target_region,
                    units=var_info.get('units', None),
                    range=var_info['range'],
                    show_ratio=True,
                    show_qq=False,
                    plot_signal_significance=False,
                    dir=PLOTS_DIR,
                    systematics=SYSTEMATICS.values() if args.systematics else None,
                    root=args.root,
                    output_formats=args.output_formats)
            figures[category][expr] = fig

    if 'train' in args.actions:
        
        # all modes, all masses
        signals_train = [
            Higgs(
                year=year,
                mass=125,
                systematics=args.systematics),
        ]

        clf = ClassificationProblem(
                fields=cat_info['features'],
                category=category,
                category_name=cat_info['name'],
                region=target_region,
                output_suffix=output_suffix)
        
        clf.train(
                signals=signals_train,
                backgrounds=backgrounds,
                cuts=None,
                grid_search=args.grid_search,
                quick=args.quick_train,
                cv_nfold=args.nfold,
                use_cache=args.use_clf_cache)
        
        clf.evaluate(
                backgrounds,
                data,
                mass_regions,
                unblind=args.unblind,
                systematics=args.systematics,
                bins=args.bins)

        #category_scores[category] = (bkg_scores, sig_scores)

    if 'limits' in args.actions:

        # run hypothesis tests
        channels = hypotests.channels(
                clf, category, target_region,
                backgrounds, data=data, 
                cuts=signal_region,
                bins=cat_info['limitbins'],
                binning=cat_info['limitbinning'],
                mass_points=[125],
                systematics=args.systematics)

        limit_hists = hypotests.limits(
                channels, mass_points=[125])


# save all variable plots in one large multipage pdf
if figures and set(args.categories) == set(CATEGORIES.keys()) and not args.plots:
    # only create multipage pdf of all plots if we created all plots
    for category, exprs in figures.items():
        figs = sorted(exprs.items(), key=lambda x: x[0])
        make_multipage_pdf([fig[1] for fig in figs],
                name=category,
                dir=PLOTS_DIR)
