#!/usr/bin/env python

# -- Create by Quentin Buat quentin(dot)buat(at)cern(dot)ch
# Compute the yields for each components (Table 8 and 9 of the internal CB note)

from collections import OrderedDict

# local import
from mva.cmd import get_parser
args = get_parser(actions=False).parse_args()

from mva import log
from mva.defaults import TARGET_REGION
from mva.analysis import get_analysis
from mva.categories.common import Category_Preselection
from statstools.ufloat import ufloat

analysis = get_analysis(args)
output_suffix = analysis.get_suffix()

# -------------------------------------
def get_yield(sample, Category=Category_Preselection, cuts='', systematic='NOMINAL'):
    """ 
	Retrieve the (weigthed) yield and its stat error for a sample to
    	pass a given cut after the preselection
    """
    hist = sample.events(Category, TARGET_REGION, cuts=cuts, systematic=systematic)
    val, err = hist[1].value,hist[1].error 
    return ufloat(val,err)
# -------------------------------------



data    = analysis.data
signals = analysis.signals
ztautau = analysis.ztautau
qcd     = analysis.qcd
others  = analysis.others
backgrounds = analysis.backgrounds



latex_line = OrderedDict()

latex_line['cat_name'] = '&'
latex_line['sep_1']    = '\\hline'
latex_line['Higgs']    = 'H($m_H$ = 125 GeV) &'
latex_line['sep_2']    = '\\hline'
latex_line['Ztautau']  = 'Z$\\rightarrow\\tau\\tau$ &'
latex_line['QCD']      = 'Multi-jets &'
latex_line['Others']   = 'Others &'
latex_line['sep_3']    = '\\hline'
latex_line['TotalBkg'] = 'Total Bkg. &'
latex_line['sep_4']    = '\\hline'
latex_line['Data']     = 'Data &'


for category in analysis.iter_categories(args.categories,
                                         args.controls,
                                         names=args.category_names):


    if category.analysis_control:
        continue

    signal_yield = ufloat(0,0)
    for signal in signals:
        signal_yield += get_yield(signal,category)

    bkg_yield = ufloat(0,0)
    for bkg in backgrounds:
        bkg_yield += get_yield(bkg,category)

    latex_line['cat_name'] += category.latex + '&'
    latex_line['Data']     += str(int(get_yield(data,category).value)) + '&'
    latex_line['Ztautau']  += str(get_yield(ztautau,category)) + '&'
    latex_line['QCD']      += str(get_yield(qcd,category)) +'&'
    latex_line['Others']   += str(get_yield(others,category)) + '&'
    latex_line['Higgs']    += str(signal_yield) + '&'
    latex_line['TotalBkg'] += str(bkg_yield) + '&'



latex_line['cat_name'] = latex_line['cat_name'][:-1]
latex_line['Higgs']    = latex_line['Higgs']   [:-1]
latex_line['Ztautau']  = latex_line['Ztautau'] [:-1]
latex_line['QCD']      = latex_line['QCD']     [:-1]
latex_line['Others']   = latex_line['Others']  [:-1]
latex_line['TotalBkg'] = latex_line['TotalBkg'][:-1]
latex_line['Data']     = latex_line['Data']    [:-1]

latex_line['cat_name'] += '\\\\'
latex_line['Higgs']    += '\\\\'
latex_line['Ztautau']  += '\\\\'
latex_line['QCD']      += '\\\\'
latex_line['Others']   += '\\\\'
latex_line['TotalBkg'] += '\\\\'
latex_line['Data']     += '\\\\'


f_latex = open( 'cutbased_summary_yields'+output_suffix+'.txt','w')
for _,line in latex_line.iteritems():
    log.info(line)
    f_latex.write(line+'\n')

