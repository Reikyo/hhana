#!/usr/bin/env python
# python imports
import os
import pickle
# rootpy imports
from rootpy.extern.ordereddict import OrderedDict
from rootpy.extern.tabulartext import PrettyTable
# local import
from mva.cmd import get_parser
from mva import log
from mva.defaults import TARGET_REGION
from mva.analysis import get_analysis
from mva.categories.common import Category_Preselection
from mva.samples import Data
from mva.systematics import get_systematics, iter_systematics
from statstools.ufloat import ufloat

# -------------------------------------
def get_yield(sample, Category=Category_Preselection, cuts='', systematic='NOMINAL'):
    """ 
	Retrieve the (weigthed) yield and its stat error for a sample to
    	pass a given cut after the preselection
    """
    if isinstance(sample, Data):
        hist = sample.events(Category, TARGET_REGION, cuts=cuts)
    else:
        hist = sample.events(Category, TARGET_REGION, cuts=cuts, systematic=systematic)
    val, err = hist[1].value, hist[1].error 
    return val, err
# -------------------------------------

args = get_parser(actions=False).parse_args()
analysis = get_analysis(args)
output_suffix = analysis.get_suffix()

cuts = ''



data    = analysis.data
signals = analysis.signals
ztautau = analysis.ztautau
qcd     = analysis.qcd
others  = analysis.others
backgrounds = analysis.backgrounds

for sys in iter_systematics(year=args.year, include_nominal=True):
    log.info(sys)


yields_tot = {}

for systematic in iter_systematics(year=args.year, include_nominal=True):
    yields = {}
    latex_line = OrderedDict()
    latex_line['cat_name'] = '&'
    latex_line['sep_1']    = '\\hline'
    latex_line['Higgs']    = 'H($m_H$ = 125 GeV) &'
    latex_line['sep_2']    = '\\hline'
    latex_line['Ztautau']  = 'Z$\\rightarrow\\tau\\tau$ &'
    latex_line['QCD']      = 'Multi-jets &'
    latex_line['Others']   = 'Others &'
    latex_line['sep_3']    = '\\hline'
    latex_line['TotalBkg'] = 'Total Bkg. &'
    latex_line['sep_4']    = '\\hline'
    latex_line['Data']     = 'Data &'
    for category in analysis.iter_categories(args.categories,
                                             args.controls,
                                             names=args.category_names):

        if category.analysis_control:
            continue

        yields[category.name] = {}
        log.info(category.name)
        signal_yield = ufloat(0, 0)
        for signal in signals:
            log.info('{0}: {1}'.format(signal.name, get_yield(signal, category, cuts=cuts, systematic=systematic)))
            yield_tuple = get_yield(signal, category, cuts=cuts, systematic=systematic)
            signal_yield += ufloat(yield_tuple[0], yield_tuple[1])
            
        bkg_yield = ufloat(0, 0)
        for bkg in backgrounds:
            yield_tuple = get_yield(bkg, category, cuts=cuts, systematic=systematic)
            bkg_yield += ufloat(yield_tuple[0], yield_tuple[1])


        yields[category.name]['latex']   = category.latex
        yields[category.name]['Data']    = get_yield(data, category, cuts=cuts, systematic=systematic)
        yields[category.name]['Ztautau'] = get_yield(ztautau, category, cuts=cuts, systematic=systematic)
        yields[category.name]['QCD']     = get_yield(qcd, category, cuts=cuts, systematic=systematic)
        yields[category.name]['Others']  = get_yield(others, category, cuts=cuts, systematic=systematic)
        yields[category.name]['Higgs']   = (signal_yield.value, signal_yield.stat)
        yields[category.name]['TotalBkg']= (bkg_yield.value, bkg_yield.stat)

        latex_line['cat_name'] += yields[category.name]['latex'] + '&'
        latex_line['Data']     += str(int(yields[category.name]['Data'][0])) + '&'
        latex_line['Ztautau']  += str(ufloat(yields[category.name]['Ztautau'][0], yields[category.name]['Ztautau'][1])) + '&'
        latex_line['QCD']      += str(ufloat(yields[category.name]['QCD'][0], yields[category.name]['QCD'][1])) + '&'
        latex_line['Others']   += str(ufloat(yields[category.name]['Others'][0], yields[category.name]['Others'][1])) + '&'
        latex_line['Higgs']    += str(ufloat(yields[category.name]['Higgs'][0], yields[category.name]['Higgs'][1])) + '&'
        latex_line['TotalBkg'] += str(ufloat(yields[category.name]['Others'][0], yields[category.name]['Others'][1])) + '&'

    yields_tot[systematic] = yields

    latex_line['cat_name'] = latex_line['cat_name'][:-1]
    latex_line['Higgs']    = latex_line['Higgs'][:-1]
    latex_line['Ztautau']  = latex_line['Ztautau'][:-1]
    latex_line['QCD']      = latex_line['QCD'][:-1]
    latex_line['Others']   = latex_line['Others'][:-1]
    latex_line['TotalBkg'] = latex_line['TotalBkg'][:-1]
    latex_line['Data']     = latex_line['Data'][:-1]
    
    latex_line['cat_name'] += '\\\\'
    latex_line['Higgs']    += '\\\\'
    latex_line['Ztautau']  += '\\\\'
    latex_line['QCD']      += '\\\\'
    latex_line['Others']   += '\\\\'
    latex_line['TotalBkg'] += '\\\\'
    latex_line['Data']     += '\\\\'
    

    with open('summary_yields'+output_suffix+'.txt', 'w+') as f_latex:
        f_latex.write('%%---------------------------\n')
        f_latex.write(str(systematic[0])+'\n')
        for _,line in latex_line.iteritems():
            log.info(line)
            f_latex.write(line+'\n')

with open('toto.pickle', 'w') as fpick:
    pickle.dump(yields_tot, fpick)
