#!/usr/bin/env python
# python imports
import os
import pickle
# ROOT/rootpy imports
import ROOT
from ROOT import TLatex
from rootpy import asrootpy
from rootpy.io import root_open
from rootpy.plotting import Canvas, Graph, HistStack, Hist, Legend, set_style
from rootpy.plotting.utils import draw
from rootpy.plotting.style.atlas import ATLAS_style, ATLAS_label
# local imports
from mva import log; log =log[__name__]
from mva import CACHE_DIR
from mva.categories import CATEGORIES
from mva.analysis import Analysis
from mva.samples import Higgs
from statstools.finalfit_uncertband_plot import getPostFitPlottingObjects
from statstools.finalfit_uncertband_plot import UncertGraph

set_style('ATLAS', shape='rect')

#----------------------
def get_rebinned_hist(hist_origin, binning):
    hist_rebin = Hist(binning, name=hist_origin.name+'_rebinned') 
    hist_rebin[:] = hist_origin[:]
    return hist_rebin
    
#----------------------
def get_rebinned_graph(graph_origin, binning):
    log.info(list(graph_origin.x()))
    log.info(binning)
    graph_rebin = Graph(len(binning)-1)
    if len(graph_origin) != len(graph_rebin):
        log.info('{0} != {1}'.format(len(graph_origin), len(graph_rebin)))
        raise RuntimeError('wrong binning')
    else:
        for ip, (y, yerr) in enumerate(zip(graph_origin.y(), graph_origin.yerr())):
            x_rebin_err = 0.5*(binning[ip+1]-binning[ip])
            x_rebin = binning[ip] + x_rebin_err
            graph_rebin.SetPoint(ip, x_rebin, y)
            graph_rebin.SetPointError(ip, x_rebin_err, x_rebin_err, yerr[0], yerr[1])
    return graph_rebin                     

#-----------------------
def get_category(ws_cat_name, categories):
    for cat in categories:
        if cat.name in name:
            return cat
#-----------------------
def get_year(ws_name):
    if '_12' and not '_11' in ws_name:
        return 2012
    else:
        return 2011

#-----------------------
def get_mass(ws_name):
    masses = Higgs.MASSES
    for mass in masses:
        if '_{0}_'.format(mass) in ws_name:
            return mass

#----------------------------
def get_binning(name, categories, fit_var='mmc_mass'):
    binning = []
    cat = get_category(name, categories)
    year = get_year(name)
    mass = get_mass(name)
    log.info(year)
    log.info(mass)
    log.info(cat)
    if fit_var=='mmc_mass':
        binning = cat.limitbins
        if isinstance(binning, (tuple, list)):
            binning[-1] = 250
            return binning
        else:
            binning[year][-1] = 250
            return binning[year]
    else:
        with open(os.path.join(CACHE_DIR, 'binning/binning_{0}_{1}_{2}.pickle'.format(
            cat.name, mass, year % 1000))) as f:
            binning = pickle.load(f)
            binning[0] += 1E5
            binning[-1] -= 1E5
            return binning

# ------------------------------
def Fit_WS(workspace, output='frames.root'):
    """
    Fit the WS and compute the histograms and TGraphAssymErrors
    for the final plotting drawing
    Parameters
    ----------
    workspace : RooWorkspace
        HSG4 like workspace
    """
    # --> Get the Model Config object
    mc = workspace.obj("ModelConfig")
    if not mc:
        raise RuntimeError('Could not retrieve the ModelConfig object')
    mc.GetParametersOfInterest().first().setVal(1)
    roo_min = workspace.fit()
    fit_res = roo_min.save()
    fit_res.Print()
    # --> Get the data distribution
    obsData = workspace.data('obsData')
    # --> Get the simultaneous PDF
    simPdf = mc.GetPdf()

    plotting_objects = getPostFitPlottingObjects(mc, obsData, simPdf, fit_res)
    with root_open(output, 'recreate') as output_file:
        for obj in plotting_objects:
            obj.Write()



# ---------------------------------
def plot_from_frame(file, frame, fit_var, binning):
    """
    """
    Ana = Analysis(2012)

    # ---------------------------------
    hbkg = file.Get('hbkg_{0}'.format(frame.GetName()))
    curve_uncert_bkg = frame.getCurve('FitError_AfterFit_Mu0')
    graph_bkg_ws = UncertGraph(hbkg, curve_uncert_bkg)
    graph_bkg = get_rebinned_graph(graph_bkg_ws, binning) 
    graph_bkg.fillstyle='//'
    graph_bkg.color='black'
    graph_bkg.title = 'Uncert.'
    graph_bkg.legendstyle = 'F'

    # --------------------------------
    data_ws = frame.getHist('Data')
    # HACK HACK HACK
    data_ws.__class__=ROOT.TGraphAsymmErrors
    data = get_rebinned_graph(asrootpy(data_ws), binning)
    data.SetTitle('Hybrid Data')
    # --------------------------------
    hist_fake_ws = file.Get('h_Fakes_{0}'.format(frame.GetName()))
    hist_fake = get_rebinned_hist(hist_fake_ws, binning)
    hist_fake.color = Ana.qcd.hist_decor['color']
    hist_fake.fillstyle = 'solid'
    hist_fake.title = Ana.qcd.label
    hist_fake.legendstyle = 'F'
    
    # --------------------------------
    hist_others_ws = file.Get('h_Others_{0}'.format(frame.GetName()))
    hist_others = get_rebinned_hist(hist_others_ws, binning)
    hist_others.color = Ana.others.hist_decor['color']
    hist_others.fillstyle = 'solid'
    hist_others.title = Ana.others.label
    hist_others.legendstyle = 'F'

    # --------------------------------
    hist_ztautau_ws = file.Get('h_Ztautau_{0}'.format(frame.GetName()))
    hist_ztautau = get_rebinned_hist(hist_ztautau_ws, binning)
    hist_ztautau.color = Ana.ztautau.hist_decor['color']
    hist_ztautau.fillstyle = 'solid'
    hist_ztautau.title = Ana.ztautau.label
    hist_ztautau.legendstyle = 'F'
    
    # --------------------------------
    hist_signal_ws = file.Get('h_TotalSignal_{0}'.format(frame.GetName()))
    hist_signal = get_rebinned_hist(hist_signal_ws, binning)
    hist_signal.color = Ana.higgs_125.hist_decor['linecolor']
    hist_signal.linestyle = 'solid'
    hist_signal.linewidth = 4
    hist_signal.title = Ana.higgs_125.label+ ' (best fit #mu)'
    hist_signal.legendstyle = 'F'
    
    Model = HistStack(hists=[hist_fake, hist_others,
                             hist_ztautau, hist_signal],
                      name='Model_{0}'.format(frame.GetName()))

    plotables = [Model]
    if fit_var=='bdt_score':
        xtitle = 'BDT Score'
        categories = CATEGORIES['mva']
        logy = True
    else:
        xtitle='MMC MASS [GeV]'
        categories=CATEGORIES['cuts']+CATEGORIES['cuts_2011']
        logy = False
    c = Canvas()
    draw(plotables, pad=c, ypadding=(0.3, 0.3),
         xtitle=xtitle, ytitle= 'Events', logy=logy)
    if '_11' in frame.GetName():
        text='Internal 2011'
        sqrts=7
    else:
        text='Internal 2012'
        sqrts=8
        
    ATLAS_label(0.2, 0.89, pad=c, sep=0.132, text=text, sqrts=sqrts)
    graph_bkg.Draw('sameE2')
    data.Draw('samePE')

    leg = Legend([data]+Model.GetHists()+[graph_bkg],
                 rightmargin=0.2,
                 margin=0.35,
                 topmargin=0.01,
                 textsize=20,
                 entrysep=0.02,
                 entryheight=0.04)
    leg.Draw()
    label_name = None
    for cat in categories:
        if cat.name in frame.GetName():
            label_name = cat.label
        
    latex = TLatex(0.2, 0.85, label_name)
    latex.SetNDC()
    latex.SetTextSize(20)
    latex.Draw()
    c.RedrawAxis()
    if fit_var == 'bdt_score':
        c.SetLogy()
    return c

if __name__ == '__main__':
    from rootpy.extern.argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument('file')
    parser.add_argument('--name', default='combined')
    parser.add_argument('--fit-var', default='bdt_score', choices=['bdt_score', 'mmc_mass'])
    parser.add_argument('--force-fit', action='store_true', default=False)
    args = parser.parse_args()

    if args.fit_var=='bdt_score':
        categories = CATEGORIES['mva']
    else:
        categories = CATEGORIES['cuts']+CATEGORIES['cuts_2011']

    log.info(categories)
    output = os.path.splitext(args.file)[0] + '_postfit_frames.root'

    with root_open(args.file) as file:
        if args.force_fit:
            Fit_WS(file[args.name], output)

    with root_open(output) as file:
        for _, _, names in file.walk(class_pattern='*RooPlot*'):
            for name in names:
                if 'rest' in name:
                    continue
                log.info(name)
                binning = get_binning(name, categories, fit_var=args.fit_var)
                log.info(binning)
                canvas = plot_from_frame(file, file.Get(name), args.fit_var, binning)
                canvas.SaveAs('plots/postfit_{0}.png'.format(name))

                        
