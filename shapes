#!/usr/bin/env python

from mva.cmd import get_parser

args = get_parser(actions=False).parse_args()

from mva.samples import (
    Data, Others, QCD, Embedded_Ztautau, MC_Ztautau,
    Pythia_Ztautau, MC_Embedded_Ztautau)
from mva.categories import CATEGORIES, Category_Preselection
from mva.variables import VARIABLES
from mva.analysis import Analysis

from rootpy.plotting import Hist, Graph, Legend
from rootpy.plotting.templates import RatioPlot
from ROOT import TLatex

# list of fields to plot
fields = [
    'mmc1_mass',
    'MET_et',
    'MET_centrality',
    'resonance_pt',
    'dEta_tau1_tau2',
    'dR_tau1_tau2',
    'dPhi_tau1_tau2',
    'tau1_pt',
    'tau2_pt',
    'tau1_eta',
    'tau2_eta',
    'numJets',
]
field_dict = dict([(field, VARIABLES[field]) for field in fields])

# create samples
data = Data(year=args.year, label='TES-shifted Data')
data_orig = Data(year=args.year, tes_shift=False, label='Original Data')

others = Others(year=args.year)

# ztt
ztt_eb = Embedded_Ztautau(year=args.year, label='Embedded Data')
ztt_mc = MC_Ztautau(year=args.year, label='POWHEG MC')

# MC Ztt and MC embedded Ztt
ztt_pyth = Pythia_Ztautau(year=2012, label='Pythia')
ztt_mceb = MC_Embedded_Ztautau(year=2012, label='Embedded Pythia')

# fakes
qcd_nos = Analysis(args.year, qcd_shape_region='nOS').normalize(Category_Preselection).qcd.decorate(label='Isolated nOS Fakes')
qcd_nos_nonisol = Analysis(args.year, qcd_shape_region='nOS_NONISOL').normalize(Category_Preselection).qcd.decorate(label='Non-isolated nOS Fakes')

qcd_ss = Analysis(args.year, qcd_shape_region='SS').normalize(Category_Preselection).qcd.decorate(label='Isolated SS Fakes')
qcd_ss_nonisol = Analysis(args.year, qcd_shape_region='SS_NONISOL').normalize(Category_Preselection).qcd.decorate(label='Non-isolated SS Fakes')

qcd_nonisol = Analysis(args.year, qcd_shape_region='NONISOL').normalize(Category_Preselection).qcd.decorate(label='Non-isolated Fakes')


def draw_ratio(a, b, field, category, textsize=22):
    plot = RatioPlot(
        xtitle=field_dict[field]['root'],
        ytitle='Normalized Events',
        ratio_title='A / B',
        ratio_range=(0, 2),
        ratio_line_values=[0.5, 1, 1.5])
    a_integral = a.integral()
    if a_integral != 0:
        a /= a_integral
    b_integral = b.integral()
    if b_integral != 0:
        b /= b_integral
    a.title = 'A: ' + a.title
    b.title = 'B: ' + b.title
    a.color = 'black'
    b.color = 'red'
    a.legendstyle = 'L'
    b.legendstyle = 'L'
    a.markersize = 0
    b.markersize = 0
    a.linewidth = 2
    b.linewidth = 2
    a.fillstyle = 'hollow'
    b.fillstyle = 'hollow'
    a.linestyle = 'solid'
    b.linestyle = 'dashed'
    a.drawstyle='hist E0'
    b.drawstyle='hist E0'
    plot.draw('main', [a, b], ypadding=(0.3, 0.))
    ratio = Hist.divide(a, b, fill_value=-1)
    ratio.drawstyle = 'hist'
    ratio.color = 'black'
    ratio_band = Graph(ratio, fillstyle='/', fillcolor='black', linewidth=0)
    ratio_band.drawstyle = '20'
    plot.draw('ratio', [ratio_band, ratio])
    with plot.pad('main') as pad:
        # legend
        leg = Legend([a, b],
                     leftmargin=0.25, topmargin=0.1,
                     margin=0.2, textsize=textsize)
        leg.Draw()
        # draw the category label
        label = TLatex(
            pad.GetLeftMargin() + 0.04, 0.87,
            category.label)
        label.SetNDC()
        label.SetTextFont(43)
        label.SetTextSize(textsize)
        label.Draw()
        # show p-value and chi^2
        pvalue = a.Chi2Test(b, 'WW')
        pvalue_label = TLatex(
            pad.GetLeftMargin() + 0.04, 0.8,
            "p-value={0:.2f}".format(pvalue))
        pvalue_label.SetNDC(True)
        pvalue_label.SetTextFont(43)
        pvalue_label.SetTextSize(textsize)
        pvalue_label.Draw()
        chi2 = a.Chi2Test(b, 'WW CHI2/NDF')
        chi2_label = TLatex(
            pad.GetLeftMargin() + 0.04, 0.72,
            "#frac{{#chi^{{2}}}}{{ndf}}={0:.2f}".format(chi2))
        chi2_label.SetNDC(True)
        chi2_label.SetTextFont(43)
        chi2_label.SetTextSize(textsize)
        chi2_label.Draw()
    return plot


def compare(a, b, category, name):
    a_hists, field_scale = a.get_field_hist(field_dict, category)
    b_hists, _ = b.get_field_hist(field_dict, category)
    a.draw_array(a_hists, category, 'OS', field_scale=field_scale)
    b.draw_array(b_hists, category, 'OS', field_scale=field_scale)
    for field in fields:
        # draw ratio plot
        a_hist = a_hists[field]
        b_hist = b_hists[field]
        plot = draw_ratio(a_hist, b_hist, field, category)
        plot.SaveAs('plots/shapes/shape_{0}_{1}_{2}_{3}.png'.format(
            name, field, category.name, args.year % 1000))


for category in CATEGORIES[args.categories] + [Category_Preselection]:
    # compare SS and nOS QCD shapes
    compare(qcd_nos, qcd_ss, category, 'qcd_ss_v_nos')
    # compare SS ISOL and SS NONISOL QCD shapes
    compare(qcd_ss, qcd_ss_nonisol, category, 'qcd_ss')
    # compare NONISOL and nOS QCD shapes
    compare(qcd_nos, qcd_nos_nonisol, category, 'qcd_nos')
    # compare nOS NONISOL and NONISOL (no charge requirement)
    compare(qcd_nos_nonisol, qcd_nonisol, category, 'qcd_nonisol')
    
    # compare tes-shifted data with original data
    compare(data, data_orig, category, 'data_tes')

    # compare Ztt shapes
    compare(ztt_eb, ztt_mc, category, 'ztt')
    # Compare MC Ztautau with embedded MC Zmumu
    compare(ztt_pyth, ztt_mceb, category, 'ebztt')
