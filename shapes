#!/usr/bin/env python

# create an ntuple containing trees for data with classifier scores
# and event weights

from mva.cmd import get_parser

args = get_parser(actions=False).parse_args()

from mva.samples import (
    Data, Others, QCD, Embedded_Ztautau, MC_Ztautau,
    Pythia_Ztautau, MC_Embedded_Ztautau)
from mva.categories import CATEGORIES, Category_Preselection
from mva.variables import VARIABLES

from rootpy.plotting import Hist, Graph, Legend
from rootpy.plotting.templates import RatioPlot
from ROOT import TLatex

# list of fields to plot
fields = [
    'mmc1_mass',
    'MET_et',
    'MET_centrality',
    'resonance_pt',
    'dEta_tau1_tau2',
    'dR_tau1_tau2',
    'dPhi_tau1_tau2',
    'tau1_pt',
    'tau2_pt',
    'tau1_eta',
    'tau2_eta',
]
field_dict = dict([(field, VARIABLES[field]) for field in fields])

# create samples
data = Data(year=args.year, label='TES-shifted Data',
    drawstyle='hist E0', markersize=0, color='black',
    linewidth=2, fillstyle='hollow', legendstyle='L')
data_orig = Data(year=args.year, tes_shift=False, label='Original Data',
    drawstyle='hist E0', markersize=0, color='red',
    linewidth=2, fillstyle='hollow', legendstyle='L', linestyle='dashed')

others = Others(year=args.year)

# ztt
ztt_eb = Embedded_Ztautau(year=args.year, label='Embedded Data',
    drawstyle='hist E0', markersize=0, color='black',
    linewidth=2, fillstyle='hollow', legendstyle='L') 
ztt_mc = MC_Ztautau(year=args.year, label='POWHEG MC',
    drawstyle='hist E0', markersize=0, color='red',
    linewidth=2, fillstyle='hollow', legendstyle='L', linestyle='dashed')

# qcd
qcd_nos = QCD(data, [ztt_eb, others], shape_region='nOS', label='Multijet nOS',
    drawstyle='hist E0', markersize=0, color='black',
    linewidth=2, fillstyle='hollow', legendstyle='L') 
qcd_ss = QCD(data, [ztt_eb, others], shape_region='SS', label='Multijet SS',
    drawstyle='hist E0', markersize=0, color='red',
    linewidth=2, fillstyle='hollow', legendstyle='L', linestyle='dashed')

# MC Ztt and MC embedded Ztt
ztt_pyth = Pythia_Ztautau(year=2012, label='Pythia',
    drawstyle='hist E0', markersize=0, color='black',
    linewidth=2, fillstyle='hollow', legendstyle='L')
ztt_mceb = MC_Embedded_Ztautau(year=2012, label='Embedded Pythia',
    drawstyle='hist E0', markersize=0, color='red',
    linewidth=2, fillstyle='hollow', legendstyle='L', linestyle='dashed')


def draw_ratio(a, b, category, ratio_title='ratio', textsize=22):
    plot = RatioPlot(
        xtitle=field_dict[field]['root'],
        ytitle='Normalized Events',
        ratio_title=ratio_title,
        ratio_range=(0, 2),
        ratio_line_values=[0.5, 1, 1.5])
    a_integral = a.integral()
    if a_integral != 0:
        a /= a_integral
    b_integral = b.integral()
    if b_integral != 0:
        b /= b_integral
    plot.draw('main', [a, b], ypadding=(0.3, 0.))
    ratio = Hist.divide(a, b, fill_value=-1)
    ratio.drawstyle = 'hist'
    ratio.color = 'black'
    ratio_band = Graph(ratio, fillstyle='/', fillcolor='black', linewidth=0)
    ratio_band.drawstyle = '20'
    plot.draw('ratio', [ratio_band, ratio])
    with plot.pad('main') as pad:
        # legend
        leg = Legend([a, b], leftmargin=0.3, topmargin=0.1, margin=0.2, textsize=textsize)
        leg.Draw()
        # draw the category label
        label = TLatex(
            pad.GetLeftMargin() + 0.04, 0.87,
            category.label)
        label.SetNDC()
        label.SetTextFont(43)
        label.SetTextSize(textsize)
        label.Draw()
        # show KS and Chi^2
        ks = a.KolmogorovTest(b)
        ks_label = TLatex(
            pad.GetLeftMargin() + 0.04, 0.8,
            "KS={0:.2f}".format(ks))
        ks_label.SetNDC(True)
        ks_label.SetTextFont(43)
        ks_label.SetTextSize(textsize)
        ks_label.Draw()
        chi2 = a.Chi2Test(b, 'WW CHI2/NDF')
        chi2_label = TLatex(
            pad.GetLeftMargin() + 0.04, 0.75,
            "#chi^{{2}}={0:.2f}".format(chi2))
        chi2_label.SetNDC(True)
        chi2_label.SetTextFont(43)
        chi2_label.SetTextSize(textsize)
        chi2_label.Draw()
    return plot


for category in CATEGORIES[args.categories] + [Category_Preselection]:

    # compare tes-shifted data with original data
    data_hists, field_scale = data.get_field_hist(field_dict, category)
    data_orig_hists, _ = data_orig.get_field_hist(field_dict, category)
    data.draw_array(data_hists, category, 'OS', field_scale=field_scale)
    data_orig.draw_array(data_orig_hists, category, 'OS', field_scale=field_scale)
    for field in fields:
        # draw ratio plot
        d = data_hists[field]
        d_orig = data_orig_hists[field]
        plot = draw_ratio(d, d_orig, category, ratio_title='TES Shift / Orig.')
        plot.SaveAs('plots/shapes/shape_datates_{0}_{1}_{2}.png'.format(field, category.name, args.year % 1000))

    # compare QCD shapes
    qcd_nos_hists, field_scale = qcd_nos.get_field_hist(field_dict, category)
    qcd_ss_hists, _ = qcd_ss.get_field_hist(field_dict, category)
    qcd_nos.draw_array(qcd_nos_hists, category, 'OS', field_scale=field_scale)
    qcd_ss.draw_array(qcd_ss_hists, category, 'OS', field_scale=field_scale)
    for field in fields:
        # draw ratio plot
        nos = qcd_nos_hists[field]
        ss = qcd_ss_hists[field]
        plot = draw_ratio(nos, ss, category, ratio_title='nOS / SS')
        plot.SaveAs('plots/shapes/shape_qcd_{0}_{1}_{2}.png'.format(field, category.name, args.year % 1000))

    # compare Ztt shapes
    ztt_eb_hists, field_scale = ztt_eb.get_field_hist(field_dict, category)
    ztt_mc_hists, _ = ztt_mc.get_field_hist(field_dict, category)
    ztt_eb.draw_array(ztt_eb_hists, category, 'OS', field_scale=field_scale)
    ztt_mc.draw_array(ztt_mc_hists, category, 'OS', field_scale=field_scale)
    for field in fields:
        # draw ratio plot
        eb = ztt_eb_hists[field]
        mc = ztt_mc_hists[field]
        plot = draw_ratio(eb, mc, category, ratio_title='Emb / MC')
        plot.SaveAs('plots/shapes/shape_ztt_{0}_{1}_{2}.png'.format(field, category.name, args.year % 1000))

    # Compare MC Ztautau with embedded MC Zmumu
    ztt_pyth_hists, field_scale = ztt_pyth.get_field_hist(field_dict, category)
    ztt_mceb_hists, _ = ztt_mceb.get_field_hist(field_dict, category)
    ztt_pyth.draw_array(ztt_pyth_hists, category, 'OS', field_scale=field_scale)
    ztt_mceb.draw_array(ztt_mceb_hists, category, 'OS', field_scale=field_scale)
    for field in fields:
        # draw ratio plot
        pyth = ztt_pyth_hists[field]
        mceb = ztt_mceb_hists[field]
        plot = draw_ratio(pyth, mceb, category, ratio_title='MC / Emb')
        plot.SaveAs('plots/shapes/shape_ebztt_{0}_{1}_12.png'.format(field, category.name))
