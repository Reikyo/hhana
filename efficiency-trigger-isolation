#!/usr/bin/env python
"""
"""
# python imports
import os
import logging
# numpy/root_numpy imports
from root_numpy import fill_hist
import numpy as np
# ROOT/rootpy imports
from rootpy.io import root_open
from rootpy.plotting import Canvas, Legend, Hist2D
from rootpy.plotting.style import set_style
from rootpy.extern.argparse import ArgumentParser
from rootpy import ROOT
# local imports
from mva import DAT_DIR
from mva import samples 
from mva.categories import Category_VBF, Category_Boosted
from mva.defaults import TARGET_REGION

log = logging.getLogger(os.path.basename(__file__))


if __name__=='__main__':
    parser = ArgumentParser()
    parser.add_argument('category', choices=['boosted', 'vbf'])
    parser.add_argument('sample', choices=['Higgs', 'MC_Ztautau'])
    args = parser.parse_args()
    if args.category == 'boosted':
        Category = Category_Boosted
    elif args.category == 'vbf':
        Category = Category_VBF

    sample = getattr(samples, args.sample)


    nom = sample(2012)
    nom_weights = nom.events(Category, TARGET_REGION)[1].value

    log.info(nom_weights)
    iso_corrections = []
    with root_open(os.path.join(DAT_DIR, 'iso_curves_truth.root')) as fcorr:
        for _, _, names in fcorr.walk():
            for name in names:
                if 'run1' in name:
                    iso_corrections.append(name)
    iso_corrections_dict = {}
    for corr in iso_corrections:
        s = sample(2012, iso_correction_graph=corr)
        s_yield = s.events(Category, TARGET_REGION)[1].value
        log.info(s_yield)
        offset, slope = corr.replace('__', '/').replace('_over_run1', '').replace('_', '.').split('/')
        
        iso_corrections_dict[corr] = {
            'offset': float(offset), 
            'slope': float(slope), 
            'yield': s_yield, 
            'eff': s_yield / nom_weights}

    a = np.array([[iso_corrections_dict[key]['offset'], 
                   iso_corrections_dict[key]['slope']] for key in iso_corrections_dict])
    y = np.array([iso_corrections_dict[key]['yield'] for key in iso_corrections_dict])
    eff = np.array([iso_corrections_dict[key]['eff'] for key in iso_corrections_dict])

    h_yields = Hist2D(11, -0.25, 5.25, 10, -0.01, 0.19)
    h_eff = Hist2D(11, -0.25, 5.25, 10, -0.01, 0.19)
    fill_hist(h_yields, a, y)
    fill_hist(h_eff, a, eff)


    set_style('ATLAS')
    ROOT.gStyle.SetPaintTextFormat("1.2f")

    c = Canvas()
    c.SetTopMargin(0.08)
    c.SetRightMargin(0.15)
    lat = ROOT.TLatex(c.GetLeftMargin()+0.01, 1-c.GetTopMargin()+0.01,
                      '{0}, {1}'.format(Category.label, nom.label))
    lat.SetNDC()
    lat.SetTextSize(20)
    h_yields.xaxis.title = 'offset (b) [GeV]'
    h_yields.yaxis.title = 'slope (m)'
    h_yields.SetMarkerSize(800)
    h_yields.Draw('colztext')
    lat.Draw('same')
    c.SaveAs('yields-trigger-isolation_{0}_{1}.png'.format(Category.name, nom.name))

    c = Canvas()
    c.SetTopMargin(0.08)
    c.SetRightMargin(0.15)
    h_eff.xaxis.title = 'offset (b) [GeV]'
    h_eff.yaxis.title = 'slope (m)'
    h_eff.SetMarkerSize(800)
    h_eff.Draw('colztext')
    lat.Draw('same')
    c.SaveAs('eff-trigger-isolation_{0}_{1}.png'.format(Category.name, nom.name))

    # for iso, title, color in isol_weights:
    #     sample = Higgs(2012, iso_correction_graph=iso)
    #     sample_hists, _ = sample.get_field_hist(field_dict, Category_Boosted)
    #     sample.draw_array(
    #         sample_hists, Category_Boosted, TARGET_REGION, field_scale=field_scale)
    #     scores = sample.scores(clf, Category, TARGET_REGION)
    #     h_scores = histogram_scores(h_scores_template, scores)
    #     sample_hists['scores'] = h_scores

